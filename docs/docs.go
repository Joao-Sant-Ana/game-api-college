// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/user": {
            "post": {
                "description": "Creates a user with the given JSON body",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Create a new user",
                "parameters": [
                    {
                        "description": "User to create",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.userCreate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid body error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorBadRequest"
                        }
                    },
                    "500": {
                        "description": "Database error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorInternalServer"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "description": "Returns up to 20 users",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get list of users",
                "responses": {
                    "200": {
                        "description": "users",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/models.User"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "No users found message",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorNotFound"
                        }
                    },
                    "500": {
                        "description": "Database error message",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorInternalServer"
                        }
                    }
                }
            }
        },
        "/users/verify/{name}": {
            "get": {
                "description": "Verifies if a username already exists",
                "tags": [
                    "users"
                ],
                "summary": "Check if username is taken",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username to check",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content, name available"
                    },
                    "400": {
                        "description": "Missing name error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorBadRequest"
                        }
                    },
                    "409": {
                        "description": "Name already in use",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorConflict"
                        }
                    },
                    "500": {
                        "description": "Database error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorInternalServer"
                        }
                    }
                }
            }
        },
        "/users/waves": {
            "patch": {
                "description": "Updates the wave field for a user by name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update user's wave field",
                "parameters": [
                    {
                        "description": "Update payload",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.userUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User updated message",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid body error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorBadRequest"
                        }
                    },
                    "404": {
                        "description": "User not found error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorNotFound"
                        }
                    },
                    "500": {
                        "description": "Database error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorInternalServer"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.ErrorBadRequest": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Invalid request body"
                }
            }
        },
        "handlers.ErrorConflict": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Name already in use"
                }
            }
        },
        "handlers.ErrorInternalServer": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Internal server error"
                }
            }
        },
        "handlers.ErrorNotFound": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "User not found"
                }
            }
        },
        "handlers.SuccessResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                }
            }
        },
        "handlers.userCreate": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "example": "joao"
                }
            }
        },
        "handlers.userUpdate": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "example": "joao"
                },
                "wave": {
                    "type": "integer",
                    "example": 10
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "wave": {
                    "type": "integer"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Game API",
	Description:      "Simple API for a game made in construct3",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
